# 피드백

## 1. 한 소재 당 하나씩 만

너무 많은 이야기를 담지 마라

  ex ) 경력소개에 죄다 때려박기  ㄴㄴ 해 >> 임팩트 있는 경험 하나

## 2.   프로젝트 경험  STAR 기법을 적용하자

## 3.  경험에서의 문제해결은 구체적으로, 추상적 노노해

## 4. 첫소제목과 마지막 결론은 같아야 한다. === 일관성

## 5. 일관된 컨셉

 >> 내가 개발에 편리한 어쩌고 >> 갑자기 사용자 친화적으로 노선 틀면 안돼

## 6. 내가 적은건 제대로 설명할 줄은 알아야함 ㅋㅋ // 공부를 한 이유

  면접관한테 설명할때 기승전결, **서사**가 있어야한다.

  ex) 내가 이런 불편 점이 있어서 찾아보니 이 기술이 이상황에 써먹기 딱 알맞기 때문에 사용했습니다. 그래서 어떤 결과 (속도, 수치, 퍼센트) 를 개선 할 수 있었다. 
      마지막으로 깨달음 >> 이를 통해서 이 회사에서 이렇게 해서 기여를 하겠다.

  ex) 리액트를 쓰는 이유 //  TDD 공부를 한 이유

## 7. 포장질을 잘하자

  ex )  프로젝트 주제, 개발문화, 해결 방법을 내가 제안을 했다.. (는 구라야~) 여기까지만 더 가면 뽀록남

## 8. 질문이 많이 들어온게 좋은게 아님

  자꾸 예시가 없으니까 자꾸 질문으로 묻는 거임

  해당 문제를 최대한 자소서 내에서 끝내야함

## 9. 포트폴리오 한 프로젝트 당 3장 이상 넘어가게 하지마

## 10. 코드, 사진은 짧고 임팩트 있게

   - 코드 : 걍 하지마 자신없음, 손가락 한마디 (걍 한눈에 바로 알아볼 수 있도록)

   - 사진 : 마니 박는다고 다가 아님 한눈에 들어와야해

         다 보여줄려고 할머니의 마음으로 죄다 퍼주는 개같은 한식 스타일 갖다 치워

          DB 구조 같은건 ㄱㅊ은데 

## 11. 기여도 수치로 해 별, 동그라미 치워


## 각 피드백

우선 기본적으로 코드들 다 버려

- 여행웹

  기술스택, 피그마, 협업 페이지 버려, 페이지 간단한 소개, 사진 한눈에 알아보기 쉽게  >> 3~4장으로 줄여

- 도서

  코드,  api 치워

  -  리액트 훅 form 어쩌구 정규표현식 이딴 설명 치워 걍 >> 로그인 화면 끝. >>> 글자를 줄여라

 무한 스크롤 >> 코드 치워 >> 무한 스크롤 해당 페이지 ++ 문제 해결 멘트 잘 버무려

- 모멘텀

 날씨  api, 미니게임 다 하나로 합치고

 코드 사진 갖다 치워 


